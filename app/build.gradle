buildscript {
    ext.kotlin_version = '1.0.0'
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

android {
    compileSdkVersion 23
    buildToolsVersion '22.0.1'

    final File versionFile = file("file:version.properties")
    final Properties versionProps = new Properties();
    versionProps.load(new FileInputStream(versionFile));
    def final code = versionProps.getProperty('versionCode').toInteger();
    def final name = versionProps.getProperty('versionName').toString();
    def final appIdBase = 'com.github.premnirmal.tickerwidget'
    defaultConfig {
        applicationId appIdBase
        minSdkVersion 14
        targetSdkVersion 22

        versionCode = code
        versionName = name

        multiDexEnabled true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    kapt {
        generateStubs = true
    }

    dexOptions {
        javaMaxHeapSize "2048M"
    }

    signingConfigs {
        release {
            storeFile file("file:keystore.jks")

            final File propsFile = file("file:keystore.properties");
            if (propsFile.exists()) {
                final Properties props = new Properties();
                props.load(new FileInputStream(propsFile));
                storePassword props.getProperty('key.store.password')
                keyPassword props.getProperty('key.alias.password')
                keyAlias props.getProperty('key.alias.alias')
            }
        }
    }

    productFlavors {
        dev {
            applicationId = appIdBase + ".dev"
        }
        prod {
            applicationId = appIdBase
        }
        purefloss { // no analytics, but still using the production packageName
            applicationId = appIdBase
        }
    }

    buildTypes {
        release {
            debuggable false
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            versionNameSuffix '-DEBUG'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'javax.inject:javax.inject:1'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.google.dagger:dagger:2.0'
    kapt 'com.google.dagger:dagger-compiler:2.0'
    compile 'com.squareup.retrofit:retrofit:1.8.+'
    compile 'io.reactivex:rxandroid:0.24.+'
    compile 'joda-time:joda-time:2.6'
    compile 'com.github.developerpaul123.filepickerlibrary:library:1.1'
    compile 'com.jjoe64:graphview:4.0.0'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile 'com.daimajia.swipelayout:library:1.0.3@aar'
    prodCompile('com.crashlytics.sdk.android:crashlytics:2.2.1@aar') {
        transitive = true;
    }

    compile 'com.android.support:multidex:1.0.0'
    prodCompile 'com.google.android.gms:play-services:7.0.0'
    compile 'com.android.support:design:23.1.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
